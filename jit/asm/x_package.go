// this file was generated by gomacro command: import _i "github.com/cosmos72/gomacro/jit/asm"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package asm

import (
	r "reflect"
	"github.com/cosmos72/gomacro/imports"
)

// reflection: allow interpreted code to import "github.com/cosmos72/gomacro/jit/asm"
func init() {
	imports.Packages["github.com/cosmos72/gomacro/jit/asm"] = imports.Package{
	Binds: map[string]r.Value{
		"ADC":	r.ValueOf(ADC),
		"ADC3":	r.ValueOf(ADC3),
		"ADD":	r.ValueOf(ADD),
		"ADD3":	r.ValueOf(ADD3),
		"ALLOC":	r.ValueOf(ALLOC),
		"AMD64":	r.ValueOf(AMD64),
		"AND":	r.ValueOf(AND),
		"AND3":	r.ValueOf(AND3),
		"AND_NOT":	r.ValueOf(AND_NOT),
		"AND_NOT3":	r.ValueOf(AND_NOT3),
		"ARM64":	r.ValueOf(ARM64),
		"Archs":	r.ValueOf(&Archs).Elem(),
		"Bool":	r.ValueOf(Bool),
		"CAST":	r.ValueOf(CAST),
		"ConstInt16":	r.ValueOf(ConstInt16),
		"ConstInt32":	r.ValueOf(ConstInt32),
		"ConstInt64":	r.ValueOf(ConstInt64),
		"ConstInt8":	r.ValueOf(ConstInt8),
		"ConstInterface":	r.ValueOf(ConstInterface),
		"ConstUint16":	r.ValueOf(ConstUint16),
		"ConstUint32":	r.ValueOf(ConstUint32),
		"ConstUint64":	r.ValueOf(ConstUint64),
		"ConstUint8":	r.ValueOf(ConstUint8),
		"DEC":	r.ValueOf(DEC),
		"DIV":	r.ValueOf(DIV),
		"DIV3":	r.ValueOf(DIV3),
		"FREE":	r.ValueOf(FREE),
		"Float32":	r.ValueOf(Float32),
		"Float64":	r.ValueOf(Float64),
		"INC":	r.ValueOf(INC),
		"Int":	r.ValueOf(Int),
		"Int16":	r.ValueOf(Int16),
		"Int32":	r.ValueOf(Int32),
		"Int64":	r.ValueOf(Int64),
		"Int8":	r.ValueOf(Int8),
		"Invalid":	r.ValueOf(Invalid),
		"InvalidSlot":	r.ValueOf(InvalidSlot),
		"KHi":	r.ValueOf(KHi),
		"KLo":	r.ValueOf(KLo),
		"LAND":	r.ValueOf(LAND),
		"LAND3":	r.ValueOf(LAND3),
		"LEA":	r.ValueOf(LEA),
		"LEA4":	r.ValueOf(LEA4),
		"LOR":	r.ValueOf(LOR),
		"LOR3":	r.ValueOf(LOR3),
		"MMAP_SUPPORTED":	r.ValueOf(MMAP_SUPPORTED),
		"MOV":	r.ValueOf(MOV),
		"MUL":	r.ValueOf(MUL),
		"MUL3":	r.ValueOf(MUL3),
		"MakeConst":	r.ValueOf(MakeConst),
		"MakeMem":	r.ValueOf(MakeMem),
		"MakeReg":	r.ValueOf(MakeReg),
		"NEG":	r.ValueOf(NEG),
		"NEG2":	r.ValueOf(NEG2),
		"NOARCH":	r.ValueOf(NOARCH),
		"NOP":	r.ValueOf(NOP),
		"NOT":	r.ValueOf(NOT),
		"NOT2":	r.ValueOf(NOT2),
		"New":	r.ValueOf(New),
		"NewArch":	r.ValueOf(NewArch),
		"NoRegId":	r.ValueOf(NoRegId),
		"OR":	r.ValueOf(OR),
		"OR3":	r.ValueOf(OR3),
		"PAGESIZE":	r.ValueOf(&PAGESIZE).Elem(),
		"POP":	r.ValueOf(POP),
		"PUSH":	r.ValueOf(PUSH),
		"Ptr":	r.ValueOf(Ptr),
		"QUO":	r.ValueOf(QUO),
		"REM":	r.ValueOf(REM),
		"REM3":	r.ValueOf(REM3),
		"RET":	r.ValueOf(RET),
		"SBB":	r.ValueOf(SBB),
		"SBB3":	r.ValueOf(SBB3),
		"SHL":	r.ValueOf(SHL),
		"SHL3":	r.ValueOf(SHL3),
		"SHR":	r.ValueOf(SHR),
		"SHR3":	r.ValueOf(SHR3),
		"SHi":	r.ValueOf(SHi),
		"SUB":	r.ValueOf(SUB),
		"SUB3":	r.ValueOf(SUB3),
		"SizeOf":	r.ValueOf(SizeOf),
		"Uint":	r.ValueOf(Uint),
		"Uint16":	r.ValueOf(Uint16),
		"Uint32":	r.ValueOf(Uint32),
		"Uint64":	r.ValueOf(Uint64),
		"Uint8":	r.ValueOf(Uint8),
		"Uintptr":	r.ValueOf(Uintptr),
		"VERBOSE":	r.ValueOf(VERBOSE),
		"XOR":	r.ValueOf(XOR),
		"XOR3":	r.ValueOf(XOR3),
		"ZERO":	r.ValueOf(ZERO),
	}, Types: map[string]r.Type{
		"Arch":	r.TypeOf((*Arch)(nil)).Elem(),
		"ArchId":	r.TypeOf((*ArchId)(nil)).Elem(),
		"Arg":	r.TypeOf((*Arg)(nil)).Elem(),
		"Asm":	r.TypeOf((*Asm)(nil)).Elem(),
		"Code":	r.TypeOf((*Code)(nil)).Elem(),
		"Const":	r.TypeOf((*Const)(nil)).Elem(),
		"Kind":	r.TypeOf((*Kind)(nil)).Elem(),
		"Mem":	r.TypeOf((*Mem)(nil)).Elem(),
		"Op0":	r.TypeOf((*Op0)(nil)).Elem(),
		"Op1":	r.TypeOf((*Op1)(nil)).Elem(),
		"Op2":	r.TypeOf((*Op2)(nil)).Elem(),
		"Op2Misc":	r.TypeOf((*Op2Misc)(nil)).Elem(),
		"Op3":	r.TypeOf((*Op3)(nil)).Elem(),
		"Op4":	r.TypeOf((*Op4)(nil)).Elem(),
		"Reg":	r.TypeOf((*Reg)(nil)).Elem(),
		"RegId":	r.TypeOf((*RegId)(nil)).Elem(),
		"RegIdCfg":	r.TypeOf((*RegIdCfg)(nil)).Elem(),
		"RegIds":	r.TypeOf((*RegIds)(nil)).Elem(),
		"Save":	r.TypeOf((*Save)(nil)).Elem(),
		"SaveSlot":	r.TypeOf((*SaveSlot)(nil)).Elem(),
		"Size":	r.TypeOf((*Size)(nil)).Elem(),
		"SoftRegId":	r.TypeOf((*SoftRegId)(nil)).Elem(),
		"SoftRegIds":	r.TypeOf((*SoftRegIds)(nil)).Elem(),
	}, Proxies: map[string]r.Type{
		"Arch":	r.TypeOf((*P_github_com_cosmos72_gomacro_jit_asm_Arch)(nil)).Elem(),
		"Arg":	r.TypeOf((*P_github_com_cosmos72_gomacro_jit_asm_Arg)(nil)).Elem(),
	}, Untypeds: map[string]string{
		"MMAP_SUPPORTED":	"bool:true",
		"SHi":	"int:2147483647",
		"VERBOSE":	"bool:false",
	}, 
	}
}

// --------------- proxy for github.com/cosmos72/gomacro/jit/asm.Arch ---------------
type P_github_com_cosmos72_gomacro_jit_asm_Arch struct {
	Object	interface{}
	CodeString_	func(_proxy_obj_ interface{}, c Code) string
	Epilogue_	func(_proxy_obj_ interface{}, asm *Asm) *Asm
	Id_	func(interface{}) ArchId
	Init_	func(_proxy_obj_ interface{}, asm *Asm, saveStart SaveSlot, saveEnd SaveSlot) *Asm
	Name_	func(interface{}) string
	Op0_	func(_proxy_obj_ interface{}, asm *Asm, op Op0) *Asm
	Op1_	func(_proxy_obj_ interface{}, asm *Asm, op Op1, dst Arg) *Asm
	Op2_	func(_proxy_obj_ interface{}, asm *Asm, op Op2, src Arg, dst Arg) *Asm
	Op3_	func(_proxy_obj_ interface{}, asm *Asm, op Op3, a Arg, b Arg, dst Arg) *Asm
	Op4_	func(_proxy_obj_ interface{}, asm *Asm, op Op4, a Arg, b Arg, c Arg, dst Arg) *Asm
	Prologue_	func(_proxy_obj_ interface{}, asm *Asm) *Asm
	RegIdCfg_	func(interface{}) RegIdCfg
	RegIdString_	func(_proxy_obj_ interface{}, id RegId) string
	RegIdValid_	func(_proxy_obj_ interface{}, id RegId) bool
	RegString_	func(_proxy_obj_ interface{}, r Reg) string
	RegValid_	func(_proxy_obj_ interface{}, r Reg) bool
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_Arch) CodeString(c Code) string {
	return P.CodeString_(P.Object, c)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_Arch) Epilogue(asm *Asm) *Asm {
	return P.Epilogue_(P.Object, asm)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_Arch) Id() ArchId {
	return P.Id_(P.Object)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_Arch) Init(asm *Asm, saveStart SaveSlot, saveEnd SaveSlot) *Asm {
	return P.Init_(P.Object, asm, saveStart, saveEnd)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_Arch) Name() string {
	return P.Name_(P.Object)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_Arch) Op0(asm *Asm, op Op0) *Asm {
	return P.Op0_(P.Object, asm, op)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_Arch) Op1(asm *Asm, op Op1, dst Arg) *Asm {
	return P.Op1_(P.Object, asm, op, dst)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_Arch) Op2(asm *Asm, op Op2, src Arg, dst Arg) *Asm {
	return P.Op2_(P.Object, asm, op, src, dst)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_Arch) Op3(asm *Asm, op Op3, a Arg, b Arg, dst Arg) *Asm {
	return P.Op3_(P.Object, asm, op, a, b, dst)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_Arch) Op4(asm *Asm, op Op4, a Arg, b Arg, c Arg, dst Arg) *Asm {
	return P.Op4_(P.Object, asm, op, a, b, c, dst)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_Arch) Prologue(asm *Asm) *Asm {
	return P.Prologue_(P.Object, asm)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_Arch) RegIdCfg() RegIdCfg {
	return P.RegIdCfg_(P.Object)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_Arch) RegIdString(id RegId) string {
	return P.RegIdString_(P.Object, id)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_Arch) RegIdValid(id RegId) bool {
	return P.RegIdValid_(P.Object, id)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_Arch) RegString(r Reg) string {
	return P.RegString_(P.Object, r)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_Arch) RegValid(r Reg) bool {
	return P.RegValid_(P.Object, r)
}

// --------------- proxy for github.com/cosmos72/gomacro/jit/asm.Arg ---------------
type P_github_com_cosmos72_gomacro_jit_asm_Arg struct {
	Object	interface{}
	Const_	func(interface{}) bool
	Kind_	func(interface{}) Kind
	RegId_	func(interface{}) RegId
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_Arg) Const() bool {
	return P.Const_(P.Object)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_Arg) Kind() Kind {
	return P.Kind_(P.Object)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_Arg) RegId() RegId {
	return P.RegId_(P.Object)
}
