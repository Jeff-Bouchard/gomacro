// this file was generated by gomacro command: import _i "github.com/cosmos72/gomacro/jit/asm/arm64"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package arm64

import (
	r "reflect"
	"github.com/cosmos72/gomacro/imports"
	asm "github.com/cosmos72/gomacro/jit/asm"
)

// reflection: allow interpreted code to import "github.com/cosmos72/gomacro/jit/asm/arm64"
func init() {
	imports.Packages["github.com/cosmos72/gomacro/jit/asm/arm64"] = imports.Package{
	Binds: map[string]r.Value{
		"ADC":	r.ValueOf(ADC),
		"ADC3":	r.ValueOf(ADC3),
		"ADD":	r.ValueOf(ADD),
		"ADD3":	r.ValueOf(ADD3),
		"ALLOC":	r.ValueOf(ALLOC),
		"AND":	r.ValueOf(AND),
		"AND3":	r.ValueOf(AND3),
		"AND_NOT":	r.ValueOf(AND_NOT),
		"AND_NOT3":	r.ValueOf(AND_NOT3),
		"Bool":	r.ValueOf(Bool),
		"CAST":	r.ValueOf(CAST),
		"ConstInt64":	r.ValueOf(ConstInt64),
		"ConstUint64":	r.ValueOf(ConstUint64),
		"DEC":	r.ValueOf(DEC),
		"DIV":	r.ValueOf(DIV),
		"DIV3":	r.ValueOf(DIV3),
		"FREE":	r.ValueOf(FREE),
		"Float32":	r.ValueOf(Float32),
		"Float64":	r.ValueOf(Float64),
		"INC":	r.ValueOf(INC),
		"Imm3AddSub":	r.ValueOf(Imm3AddSub),
		"Imm3Bitwise":	r.ValueOf(Imm3Bitwise),
		"Imm3None":	r.ValueOf(Imm3None),
		"Imm3Shift":	r.ValueOf(Imm3Shift),
		"Int":	r.ValueOf(Int),
		"Int16":	r.ValueOf(Int16),
		"Int32":	r.ValueOf(Int32),
		"Int64":	r.ValueOf(Int64),
		"Int8":	r.ValueOf(Int8),
		"Invalid":	r.ValueOf(Invalid),
		"InvalidSlot":	r.ValueOf(InvalidSlot),
		"KHi":	r.ValueOf(KHi),
		"KLo":	r.ValueOf(KLo),
		"LAND":	r.ValueOf(LAND),
		"LAND3":	r.ValueOf(LAND3),
		"LOR":	r.ValueOf(LOR),
		"LOR3":	r.ValueOf(LOR3),
		"MMAP_SUPPORTED":	r.ValueOf(MMAP_SUPPORTED),
		"MOV":	r.ValueOf(MOV),
		"MUL":	r.ValueOf(MUL),
		"MUL3":	r.ValueOf(MUL3),
		"MakeConst":	r.ValueOf(MakeConst),
		"MakeMem":	r.ValueOf(MakeMem),
		"MakeReg":	r.ValueOf(MakeReg),
		"NAME":	r.ValueOf(NAME),
		"NEG":	r.ValueOf(NEG),
		"NEG2":	r.ValueOf(NEG2),
		"NOP":	r.ValueOf(NOP),
		"NOT":	r.ValueOf(NOT),
		"NOT2":	r.ValueOf(NOT2),
		"New":	r.ValueOf(New),
		"NoRegId":	r.ValueOf(NoRegId),
		"OR":	r.ValueOf(OR),
		"OR3":	r.ValueOf(OR3),
		"POP":	r.ValueOf(POP),
		"PUSH":	r.ValueOf(PUSH),
		"Ptr":	r.ValueOf(Ptr),
		"REM":	r.ValueOf(REM),
		"REM3":	r.ValueOf(REM3),
		"RET":	r.ValueOf(RET),
		"RHi":	r.ValueOf(RHi),
		"RLo":	r.ValueOf(RLo),
		"RSP":	r.ValueOf(RSP),
		"RVAR":	r.ValueOf(RVAR),
		"SBB":	r.ValueOf(SBB),
		"SBB3":	r.ValueOf(SBB3),
		"SHL":	r.ValueOf(SHL),
		"SHL3":	r.ValueOf(SHL3),
		"SHR":	r.ValueOf(SHR),
		"SHR3":	r.ValueOf(SHR3),
		"SUB":	r.ValueOf(SUB),
		"SUB3":	r.ValueOf(SUB3),
		"SUPPORTED":	r.ValueOf(SUPPORTED),
		"SizeOf":	r.ValueOf(SizeOf),
		"Uint":	r.ValueOf(Uint),
		"Uint16":	r.ValueOf(Uint16),
		"Uint32":	r.ValueOf(Uint32),
		"Uint64":	r.ValueOf(Uint64),
		"Uint8":	r.ValueOf(Uint8),
		"Uintptr":	r.ValueOf(Uintptr),
		"X0":	r.ValueOf(X0),
		"X1":	r.ValueOf(X1),
		"X10":	r.ValueOf(X10),
		"X11":	r.ValueOf(X11),
		"X12":	r.ValueOf(X12),
		"X13":	r.ValueOf(X13),
		"X14":	r.ValueOf(X14),
		"X15":	r.ValueOf(X15),
		"X16":	r.ValueOf(X16),
		"X17":	r.ValueOf(X17),
		"X18":	r.ValueOf(X18),
		"X19":	r.ValueOf(X19),
		"X2":	r.ValueOf(X2),
		"X20":	r.ValueOf(X20),
		"X21":	r.ValueOf(X21),
		"X22":	r.ValueOf(X22),
		"X23":	r.ValueOf(X23),
		"X24":	r.ValueOf(X24),
		"X25":	r.ValueOf(X25),
		"X26":	r.ValueOf(X26),
		"X27":	r.ValueOf(X27),
		"X28":	r.ValueOf(X28),
		"X29":	r.ValueOf(X29),
		"X3":	r.ValueOf(X3),
		"X30":	r.ValueOf(X30),
		"X4":	r.ValueOf(X4),
		"X5":	r.ValueOf(X5),
		"X6":	r.ValueOf(X6),
		"X7":	r.ValueOf(X7),
		"X8":	r.ValueOf(X8),
		"X9":	r.ValueOf(X9),
		"XOR":	r.ValueOf(XOR),
		"XOR3":	r.ValueOf(XOR3),
		"XSP":	r.ValueOf(XSP),
		"XZR":	r.ValueOf(XZR),
		"ZERO":	r.ValueOf(ZERO),
	}, Types: map[string]r.Type{
		"Arch":	r.TypeOf((*Arch)(nil)).Elem(),
		"ArchId":	r.TypeOf((*ArchId)(nil)).Elem(),
		"Arg":	r.TypeOf((*Arg)(nil)).Elem(),
		"Arm64":	r.TypeOf((*Arm64)(nil)).Elem(),
		"Asm":	r.TypeOf((*Asm)(nil)).Elem(),
		"Code":	r.TypeOf((*Code)(nil)).Elem(),
		"Const":	r.TypeOf((*Const)(nil)).Elem(),
		"Immediate3":	r.TypeOf((*Immediate3)(nil)).Elem(),
		"Kind":	r.TypeOf((*Kind)(nil)).Elem(),
		"Mem":	r.TypeOf((*Mem)(nil)).Elem(),
		"Op0":	r.TypeOf((*Op0)(nil)).Elem(),
		"Op1":	r.TypeOf((*Op1)(nil)).Elem(),
		"Op2":	r.TypeOf((*Op2)(nil)).Elem(),
		"Op2Misc":	r.TypeOf((*Op2Misc)(nil)).Elem(),
		"Op3":	r.TypeOf((*Op3)(nil)).Elem(),
		"Op4":	r.TypeOf((*Op4)(nil)).Elem(),
		"Reg":	r.TypeOf((*Reg)(nil)).Elem(),
		"RegId":	r.TypeOf((*RegId)(nil)).Elem(),
		"RegIdCfg":	r.TypeOf((*RegIdCfg)(nil)).Elem(),
		"RegIds":	r.TypeOf((*RegIds)(nil)).Elem(),
		"Save":	r.TypeOf((*Save)(nil)).Elem(),
		"SaveSlot":	r.TypeOf((*SaveSlot)(nil)).Elem(),
		"Size":	r.TypeOf((*Size)(nil)).Elem(),
		"SoftRegId":	r.TypeOf((*SoftRegId)(nil)).Elem(),
		"SoftRegIds":	r.TypeOf((*SoftRegIds)(nil)).Elem(),
	}, Proxies: map[string]r.Type{
		"Arch":	r.TypeOf((*P_github_com_cosmos72_gomacro_jit_asm_arm64_Arch)(nil)).Elem(),
		"Arg":	r.TypeOf((*P_github_com_cosmos72_gomacro_jit_asm_arm64_Arg)(nil)).Elem(),
	}, Untypeds: map[string]string{
		"MMAP_SUPPORTED":	"bool:true",
		"NAME":	"string:arm64",
		"RHi":	"int:32",
		"RSP":	"int:32",
		"SUPPORTED":	"bool:true",
		"XSP":	"int:32",
		"XZR":	"int:32",
	}, 
	}
}

// --------------- proxy for github.com/cosmos72/gomacro/jit/asm/arm64.Arch ---------------
type P_github_com_cosmos72_gomacro_jit_asm_arm64_Arch struct {
	Object	interface{}
	CodeString_	func(_proxy_obj_ interface{}, c asm.Code) string
	Epilogue_	func(_proxy_obj_ interface{}, asm *asm.Asm) *asm.Asm
	Id_	func(interface{}) asm.ArchId
	Init_	func(_proxy_obj_ interface{}, asm *asm.Asm, saveStart asm.SaveSlot, saveEnd asm.SaveSlot) *asm.Asm
	Name_	func(interface{}) string
	Op0_	func(_proxy_obj_ interface{}, asm *asm.Asm, op asm.Op0) *asm.Asm
	Op1_	func(_proxy_obj_ interface{}, asm *asm.Asm, op asm.Op1, dst asm.Arg) *asm.Asm
	Op2_	func(_proxy_obj_ interface{}, asm *asm.Asm, op asm.Op2, src asm.Arg, dst asm.Arg) *asm.Asm
	Op3_	func(_proxy_obj_ interface{}, asm *asm.Asm, op asm.Op3, a asm.Arg, b asm.Arg, dst asm.Arg) *asm.Asm
	Op4_	func(_proxy_obj_ interface{}, asm *asm.Asm, op asm.Op4, a asm.Arg, b asm.Arg, c asm.Arg, dst asm.Arg) *asm.Asm
	Prologue_	func(_proxy_obj_ interface{}, asm *asm.Asm) *asm.Asm
	RegIdCfg_	func(interface{}) asm.RegIdCfg
	RegIdString_	func(_proxy_obj_ interface{}, id asm.RegId) string
	RegIdValid_	func(_proxy_obj_ interface{}, id asm.RegId) bool
	RegString_	func(_proxy_obj_ interface{}, r asm.Reg) string
	RegValid_	func(_proxy_obj_ interface{}, r asm.Reg) bool
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_arm64_Arch) CodeString(c asm.Code) string {
	return P.CodeString_(P.Object, c)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_arm64_Arch) Epilogue(asm *asm.Asm) *asm.Asm {
	return P.Epilogue_(P.Object, asm)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_arm64_Arch) Id() asm.ArchId {
	return P.Id_(P.Object)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_arm64_Arch) Init(asm *asm.Asm, saveStart asm.SaveSlot, saveEnd asm.SaveSlot) *asm.Asm {
	return P.Init_(P.Object, asm, saveStart, saveEnd)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_arm64_Arch) Name() string {
	return P.Name_(P.Object)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_arm64_Arch) Op0(asm *asm.Asm, op asm.Op0) *asm.Asm {
	return P.Op0_(P.Object, asm, op)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_arm64_Arch) Op1(asm *asm.Asm, op asm.Op1, dst asm.Arg) *asm.Asm {
	return P.Op1_(P.Object, asm, op, dst)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_arm64_Arch) Op2(asm *asm.Asm, op asm.Op2, src asm.Arg, dst asm.Arg) *asm.Asm {
	return P.Op2_(P.Object, asm, op, src, dst)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_arm64_Arch) Op3(asm *asm.Asm, op asm.Op3, a asm.Arg, b asm.Arg, dst asm.Arg) *asm.Asm {
	return P.Op3_(P.Object, asm, op, a, b, dst)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_arm64_Arch) Op4(asm *asm.Asm, op asm.Op4, a asm.Arg, b asm.Arg, c asm.Arg, dst asm.Arg) *asm.Asm {
	return P.Op4_(P.Object, asm, op, a, b, c, dst)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_arm64_Arch) Prologue(asm *asm.Asm) *asm.Asm {
	return P.Prologue_(P.Object, asm)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_arm64_Arch) RegIdCfg() asm.RegIdCfg {
	return P.RegIdCfg_(P.Object)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_arm64_Arch) RegIdString(id asm.RegId) string {
	return P.RegIdString_(P.Object, id)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_arm64_Arch) RegIdValid(id asm.RegId) bool {
	return P.RegIdValid_(P.Object, id)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_arm64_Arch) RegString(r asm.Reg) string {
	return P.RegString_(P.Object, r)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_arm64_Arch) RegValid(r asm.Reg) bool {
	return P.RegValid_(P.Object, r)
}

// --------------- proxy for github.com/cosmos72/gomacro/jit/asm/arm64.Arg ---------------
type P_github_com_cosmos72_gomacro_jit_asm_arm64_Arg struct {
	Object	interface{}
	Const_	func(interface{}) bool
	Kind_	func(interface{}) asm.Kind
	RegId_	func(interface{}) asm.RegId
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_arm64_Arg) Const() bool {
	return P.Const_(P.Object)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_arm64_Arg) Kind() asm.Kind {
	return P.Kind_(P.Object)
}
func (P *P_github_com_cosmos72_gomacro_jit_asm_arm64_Arg) RegId() asm.RegId {
	return P.RegId_(P.Object)
}
